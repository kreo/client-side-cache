        
        <!-- include script async -->
		<script src="js/cache.dev.js"></script>
		<script>

			// wrap cache initializing in a closure
			(function (window, document, ns) {

				'use strict';
		
				// local vars for faster access
				var helpers = ns.helpers,
					utils = helpers.utils,
                    hasConsole = window.console,
                    hasConsoleTime = (hasConsole && console.time && console.timeEnd),
					on = helpers.events.on;


				/**
				 * load additional resources on window load
				 *
				 */
				on(window, 'load', function () {

					// start console timers to profile loading time, just for testing purposes
                    if (hasConsoleTime) {
                        window.console.time('Console Time: Page css and js files loaded');
                        window.console.time('Console Time: Page images loaded');
                        window.console.time('Console Time: Html loaded');
                        window.console.time('Console Time: Application Cache loaded');
                    }

					// init base vars and loaded callback, loaded callback will be invoked
					// when called twice
					var baseUrl = window.baseurl || utils.url(window.location.pathname).folder,
						loaded = 0,
                        wait = 0,
						layerLoading = document.getElementById('layer-loading'),
                        
                        // custom check loaded function to check results (hiding loading layer, log performance and time values)
						loadedCallback = function (increaseWait) {

							loaded = loaded + 1;
                            if (increaseWait) {
                                wait = wait + 1;
                            }

							if (wait === 2 && layerLoading) {
								layerLoading.style.display = 'none';
							}
                            if (loaded === 4) {

                                // check window performance, just for testing purposes
                                if (window.performance && window.performance.timing && hasConsole) {

                                    var t = window.performance.timing;

                                    console.log('Window Performance: navigationStart until requestStart ' + (t.loadEventEnd - t.requestStart));
                                    console.log('Window Performance: navigationStart until domComplete ' + (t.loadEventEnd - t.domComplete));
                                    console.log('Window Performance: navigationStart until loadEventEnd ' + (t.loadEventEnd - t.navigationStart));
                                }

                            }
						},
						loadingBar = document.getElementById('layer-progress-value'),
						animateLoadingBar = function (data) {
							if (loadingBar) {
								helpers.dom.setAttribute(loadingBar, 'value', data);
							}
						};

                    var cache = new ns.cache.controller(function (result) {

                        // init application cache, listen to events
                        cache.load('applicationCache', function () {
                            if (hasConsoleTime) {
                                window.console.timeEnd('Console Time: Application Cache loaded');
                            }
                            animateLoadingBar(100);
                            loadedCallback(true);
                        }, {
                            progress: function (data) {
                                animateLoadingBar(data);
                            }
                        });

                        // load css and js dynamically
                        cache.load([
                            {url: baseUrl + "css/app.css", type: "css"},
                            {url: baseUrl + "js/lib.js", type: "js"},
                            {url: baseUrl + "js/app.js", type: "js", group: 1}
                        ], function () {
                            if (hasConsoleTime) {
                                window.console.timeEnd('Console Time: Page css and js files loaded');
                            }
                            loadedCallback(true);
                        });

                        // load images dynamically
                        cache.load([
                            {url: baseUrl + "assets/img/content/410x144/test-1.jpg", type: "img", node: {id: "image-1"}},
                            {url: baseUrl + "assets/img/content/410x144/test-2.jpg", type: "img", node: {id: "image-2"}},
                            {url: baseUrl + "assets/img/content/410x144/test-3.jpg", type: "img", node: {id: "image-3"}}
                        ], function () {
                            if (hasConsoleTime) {
                                window.console.timeEnd('Console Time: Page images loaded');
                            }
                            loadedCallback();
                        });

                        // load html data dynamically
                        cache.load([
                            {url: baseUrl + "ajax.html", type: "html", node: {id: "ajax"}}
                        ], function () {
                            if (hasConsoleTime) {
                                window.console.timeEnd('Console Time: Html loaded');
                            }
                            loadedCallback();
                        });
                    });
				});

			}(window, document, window.getNs()));
		</script>