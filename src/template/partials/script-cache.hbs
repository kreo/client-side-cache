        
        <!-- include script async -->
		<script src="js/cache.js"></script>
		<script>

			// wrap cache initializing in a closure
			(function (window, document, ns, undefined) {

				'use strict';
		
				// local vars for faster access
				var helpers = ns.helpers,                                       // @type {object} Shortcut for helpers functions
					utils = ns.helpers.utils,                                   // @type {object} Shortcut for utils functions
					logTimerStart = utils.logTimerStart,                        // @type {function} Shortcut for utils.logTimerStart functions
					logTimerEnd = utils.logTimerEnd,                            // @type {function} Shortcut for utils.logTimerEnd functions
					on = utils.on;                                              // @type {function} Shortcut for utilsl.on helper


				/**
				 * load additional resources on window load
				 *
				 */
				on(window, 'load', function () {

					// start timers to profile loading time, just for testing purposes
					logTimerStart('Page css and js files loaded');
					logTimerStart('Page images loaded');
					logTimerStart('Html loaded');
					logTimerStart('Application Cache loaded');


					// init base vars and loaded callback, loaded callback will be invoked
					// when called twice
					var baseUrl = window.baseurl || utils.url(window.location.pathname).folder,
						loaded = 0,
						layerLoading = document.getElementById('layer-loading'),
						loadedCallback = function () {
							loaded = loaded + 1;
							if (loaded === 2 && layerLoading) {
								layerLoading.style.display = 'none';
							}
						},
						loadingBar = document.getElementById('layer-progress-value'),
						animateLoadingBar = function (data) {
							if (loadingBar) {
								helpers.dom.setAttribute(loadingBar, 'value', data);
							}
						};

					// init application cache, listen to events
					ns.cache.load('applicationCache', function () {
					    logTimerEnd('Application Cache loaded');
						animateLoadingBar(100);
					    loadedCallback();
					}, {
					    progress: function (data) {
							animateLoadingBar(data);
					    }
					});
// load resources via chaining
    app.cache.load([
        {url: baseUrl + "assets/img/content/410x144/test-1.jpg", type: "img", node: {id: "image-1"}}
    ]).load([
        {url: baseUrl + "assets/img/content/410x144/test-2.jpg", type: "img", node: {id: "image-2"}},
        {url: baseUrl + "assets/img/content/410x144/test-3.jpg", type: "img", node: {id: "image-3"}}
    ]).load([
        {url: "img/1280x220/test-4.jpg", type: "img", node: {id: "image-4"}}
    ]);
					// load css and js dynamically
					ns.cache.load([
						{url: baseUrl + "css/app.css", type: "css"},
						{url: baseUrl + "js/lib.js", type: "js"},
						{url: baseUrl + "js/app.js", type: "js", group: 1}
					], function () {
						logTimerEnd('Page css and js files loaded');
						loadedCallback();
					});

					// load images dynamically
					//ns.cache.load([
					//    {url: baseUrl + "assets/img/content/410x144/test-1.jpg", type: "img", node: {id: "image-1"}},
					//    {url: baseUrl + "assets/img/content/410x144/test-2.jpg", type: "img", node: {id: "image-2"}},
					//    {url: baseUrl + "assets/img/content/410x144/test-3.jpg", type: "img", node: {id: "image-3"}}
					//], function () {
					//    logTimerEnd('Page images loaded');
					//});

					// load html data dynamically
					ns.cache.load([
						{url: baseUrl + "ajax.html", type: "html", node: {id: "ajax"}}
					], function () {
						logTimerEnd('Html loaded');
						loadedCallback();
					});

				});

			}(window, document, window.getNs()));
		</script>